server:
  port: 8080
  tomcat:
    uri-encoding: UTF-8



discodeit:
  storage:
    type: local
  repository:
    type: jcf  # jcf | file
    file-directory: data/

# Spring 설정
spring:
  logging:
    level:
      root: INFO
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:postgresql://localhost:5432/discodeit #local
#    url: jdbc:postgresql://localhost:5432/discodeit # docker
    username: discodeit_user
    password: discodeit1234
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      schema-locations:
        - classpath:schema-psql.sql
#  admin server
  application:
    name: discodeit
  boot:
    admin:
      client:
#        url: ${SPRING_BOOT_ADMIN_CLIENT_URL}
        url: http://localhost:9090

  jpa:
    hibernate:
      ddl-auto: none # create   # DDL? schema-psql.sql ? ??
    show-sql: false
    properties:
      hibernate.default_schema: discodeit
      hibernate:
        format_sql: true
        use_sql_comments: false

  # 서블릿 관련 설정
  servlet:
    # Multi-part 파일 업로드 관련 설정
    multipart:
      # 파일 하나의 최대 크기를 10MB로 설정
      max-file-size: 10MB
      # 요청 당 최대 크기를 10MB로 설정
      max-request-size: 10MB
  mvc:
    # 정적 자원의 URL 경로 패턴을 /static/**로 설정 (파일업로드 위치 설정용)
    #    static-path-pattern: /static/**
    static-path-pattern: /**
    # 해당 설정은 아래와 같은 효과를 가진다:
    # 1. 정적 리소스 접근 경로 지정
    #   - 브라우저에서 "http://서버주소:8080/static/..." 으로 시작하는 모든 URL 요청은 정적 리소스로 처리된다.
    #   - '**'는 와일드카드로, '/static/' 이후의 모든 경로를 포함한다는 의미다.
    # 2. 리소스 매핑
    #   - 이 설정은 "classpath:static/" 디렉토리에 있는 파일들을 "/static/**" URL 패턴으로 접근할 수 있게 합니다.
    #   - 예) "classpath:static/uploadedFiles/img/single/some-file.jpg"는
    #         브라우저에서 "http://서버주소:8080/static/uploadedFiles/img/single/some-file.jpg"로 접근 가능하다.
    # 3. 파일 업로드 경로와의 연관성
    #   - 파일 업로드 컨트롤러 코드를 보면, 파일이 "classpath:static/uploadedFiles/img/single" 또는
    #     "classpath:static/uploadedFiles/img/multi" 경로에 저장된다.
    #   - 이 파일들은 웹 브라우저에서 "/static/uploadedFiles/img/single/some-file" 또는
    #     "/static/uploadedFiles/img/multi/some-file" 경로로 접근할 수 있다.

# 파일 업로드 관련 사용자 정의 설정
file:
  upload:
    # OS별 외부 파일 저장 경로 설정
    all:
      # 윈도우 OS용 파일 업로드 기본 경로
      path: ./files


management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, loggers     # 엔드포인트 노출
      base-path: /actuator  # Actuator 엔드포인트 기본 경로
  endpoint:
    health:
      show-details: always      # 건강 상태 상세 정보 표시
      show-components: always   # 컴포넌트별 상태 정보 표시
    info:
      enabled: true             # info 엔드포인트 명시적 활성화
    loggers:
      access: unrestricted  # loggers 엔드포인트를 인증 없이 누구나 접근 가능하도록 설정
      # access: read_only   # loggers 엔드포인트를 읽기 전용으로 허용 (로그 레벨 변경 불가)
      # access: none        # loggers 엔드포인트 접근 완전 차단
  # Actuator info 엔드포인트 설정(아래 info 설정 참조)
  info:
    env:
      enabled: true             # 환경 변수 정보 포함
    java:
      enabled: true             # Java 정보 포함
    os:
      enabled: true             # OS 정보 포함
  prometheus:
    metrics:
      export:
        enabled: true  # 프로메테우스 메트릭 활성화
  metrics:
    tags:
      application: library-system  # 메트릭 태그 추가



info:
  app:
    name: Discodeit
    version: 1.7.0
  java:
    version: 17
  spring-boot:
    version: 3.4.0
  datasource:
    url: ${spring.datasource.url}
    driver-class-name: ${spring.datasource.driver-class-name}
  jpa:
    ddl-auto: ${spring.jpa.hibernate.ddl-auto}
  storage:
    type: ${discodeit.storage.type}
    path: ${discodeit.repository.file-directory}
  multipart:
    max-file-size: ${spring.servlet.multipart.max-file-size}
    max-request-size: ${spring.servlet.multipart.max-request-size}