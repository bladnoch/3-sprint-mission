name: Deploy to AWS ECS(CD)

on:
  push:
    branches: [ release ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_URI: public.ecr.aws/m8n4t4p5/discodeit
  ECR_REPOSITORY: discodeit
  ECS_SERVICE: discodeit-service
  ECS_CLUSTER: discodeit-cluster
  ECS_TASK_DEFINITION: discodeit-task

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Configure AWS credentials for Public ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

          docker build -t $ECR_REPOSITORY_URI:latest -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
          docker push $ECR_REPOSITORY_URI:latest
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials for ECS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Use task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION \
            --query "taskDefinition" > task-definition.json
          
          # 디버깅
          echo "--- 'Use task definition' 스텝 후 파일 목록 ---"
          ls -l
          echo "--- task-definition.json 내용 ---"
          cat task-definition.json || echo "task-definition.json 파일이 없습니다."
          echo "--------------------------------------"

      - name: Update image in task definition
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REPOSITORY_URI:$IMAGE_TAG
          
          # 디버깅
          if [ ! -f task-definition.json ]; then
            echo "오류: task-definition.json 파일이 존재하지 않습니다. 이전 스텝을 확인하세요."
            exit 1 # 파일이 없으면 스크립트 종료
          fi
          
          cat task-definition.json | jq \
            'del(.taskDefinitionArn, .revision, .status, .compatibilities, .requiresAttributes, .registeredAt, .registeredBy) | \
            (.containerDefinitions[0].image) = "'"$IMAGE_URI"'"' \
            > new-task-def.json
          
          # 디버깅 
          echo "--- 'Update image in task definition' 스텝 후 파일 목록 ---"
          ls -l
          echo "--- new-task-def.json 내용 ---"
          cat new-task-def.json || echo "new-task-def.json 파일이 없습니다."
          echo "----------------------------------------------"

      - name: Register new task definition
        id: register-task
        run: |
          arn=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "task_def_arn=$arn" >> $GITHUB_OUTPUT

      - name: Stop existing ECS service temporarily
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --desired-count 0

      - name: Deploy new task definition to ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition ${{ steps.register-task.outputs.task_def_arn }} \
            --desired-count 1