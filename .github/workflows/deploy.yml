name: Deploy to AWS ECS(CD)

on:
  push:
    branches: [ release ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_URI: public.ecr.aws/m8n4t4p5/discodeit
  ECR_REPOSITORY: discodeit
  ECS_SERVICE: discodeit-service
  ECS_CLUSTER: discodeit-cluster
  ECS_TASK_DEFINITION: discodeit-task

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Configure AWS credentials for Public ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

          docker build -t $ECR_REPOSITORY_URI:latest -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
          docker push $ECR_REPOSITORY_URI:latest
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials for ECS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Use task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION \
            --query "taskDefinition" > task-definition.json

      - name: Update image in task definition
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REPOSITORY_URI:$IMAGE_TAG
          if [ ! -f task-definition.json ]; then
            echo "오류: task-definition.json 파일이 존재하지 않습니다. 이전 스텝을 확인하세요."
            exit 1 # 파일이 없으면 스크립트 종료
          fi
          cat task-definition.json | jq --arg img_uri "$IMAGE_URI" 'del(.taskDefinitionArn, .revision, .status, .compatibilities, .requiresAttributes, .registeredAt, .registeredBy) | (.containerDefinitions[0].image) = $img_uri' > new-task-def.json

      - name: Register new task definition
        id: register-task
        run: |
          arn=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "task_def_arn=$arn" >> $GITHUB_OUTPUT

      - name: Stop existing ECS service temporarily
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --desired-count 0

      - name: Deploy new task definition to ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition ${{ steps.register-task.outputs.task_def_arn }} \
            --desired-count 1

      - name: Clean up old ECR Public images (Keep only 'latest')
        env:
          ECR_REPOSITORY_URI: ${{ env.ECR_REPOSITORY_URI }} # ECR_REPOSITORY_URI 환경 변수를 다시 사용합니다.
          AWS_REGION: ${{ env.AWS_REGION }} # AWS_REGION 환경 변수도 필요합니다.
        run: |
          echo "Starting ECR Public image cleanup for repository: $ECR_REPOSITORY"
          
          # ECR Public Repository 이름만 추출합니다. (예: discodeit)
          REPO_NAME=$(echo $ECR_REPOSITORY_URI | awk -F'/' '{print $NF}')
          
          # 1. 'latest' 태그가 붙은 이미지의 다이제스트(SHA)를 찾습니다.
          #    (describe-images는 항상 최신부터 반환하므로, 첫 번째 결과를 사용합니다.)
          LATEST_IMAGE_DIGEST=$(aws ecr-public describe-images \
            --region $AWS_REGION \
            --repository-name $REPO_NAME \
            --query 'imageDetails[?contains(imageTags, `latest`)].[imageDigest]' \
            --output text | head -n 1) # 여러 latest가 있을 수 있으므로 첫 번째만 사용 (shouldn't happen)
          
          if [ -z "$LATEST_IMAGE_DIGEST" ]; then
            echo "Warning: No image with 'latest' tag found. Skipping cleanup."
            exit 0 # latest 태그가 없으면 삭제할 기준이 없으므로 종료
          fi
          
          echo "Current 'latest' image digest: $LATEST_IMAGE_DIGEST"
          
          # 2. 모든 이미지의 다이제스트와 태그를 가져옵니다.
          #    latest 태그가 없거나 다른 태그가 붙은 이미지를 포함하여 모든 이미지를 가져옵니다.
          ALL_IMAGE_DETAILS=$(aws ecr-public describe-images \
            --region $AWS_REGION \
            --repository-name $REPO_NAME \
            --query 'imageDetails[*].[imageDigest,imageTags[]]' \
            --output json)
          
          # 3. 'latest' 태그가 붙은 이미지를 제외한 모든 이미지 다이제스트를 필터링합니다.
          #    jq를 사용하여 latest_image_digest와 일치하지 않는 모든 imageDigest를 추출합니다.
          IMAGES_TO_DELETE=$(echo "$ALL_IMAGE_DETAILS" | jq -r --arg LATEST_DIGEST "$LATEST_IMAGE_DIGEST" \
            '[.[] | select(.[0] != $LATEST_DIGEST) | .[0]] | unique | .[]')
          
          if [ -z "$IMAGES_TO_DELETE" ]; then
            echo "No old images to delete."
          else
            echo "Old images to delete (digests):"
            echo "$IMAGES_TO_DELETE"
          
            # 4. 필터링된 이미지들을 삭제합니다.
            #    xargs를 사용하여 각 다이제스트를 delete-image 명령에 전달합니다.
            echo "$IMAGES_TO_DELETE" | xargs -I {} aws ecr-public batch-delete-image \
              --region $AWS_REGION \
              --repository-name $REPO_NAME \
              --image-ids imageDigest={}
          
            echo "Old images successfully deleted."
          fi
          echo "ECR Public image cleanup completed."